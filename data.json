[{"name":"LICENSE","date":"2020-07-08T12:33:58.631Z","data":"---\nparent: about\nmenu: footer\n---\n\n# License\n\n## The MIT License (MIT)\n\nCopyright © `2020` `Sil van Diepen`\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","meta":{"parent":"about","menu":"footer"},"title":"License","route":"/license/index.html"},{"name":"README","date":"2020-07-08T12:33:58.631Z","data":"---\nhide: true\n---\n\n# Dokkie\n\n#### A Static site generator for documentation and blogs. Without the necessity of having any extra code in your repository\n\nDokkie gets your Readme Documentation into a page with one command. Don't bother doing anything else, just keep your Readme up to date and automatically generate a complete webpage out of it.\n\nYou know, when you make a package, you create a `Readme.md`. Well, that\nexact `readme.md` will be converted into a html page. So you can just deploy\nyour package as a little documentation website.\n\nJust keep your README up to date, and Dokkie does the rest.\n\n### Features\n\n- **No code** Build a documentation website or blog without any code in your repository\n- **Code highlighting** Automatic code highlighting for code examples\n- **Automatic menu's** Create automatic menu's\n- **Fully responsive**, obviously, it's 2020.\n- **Static and fast**, just flat html\n- **100\\*4 Lighthouse score**, Google thinks it's fast :)\n- **Multiple themes** All themes from [coat](https://coat.guyn.nl) can be used, or your own custom css.\n- **Fully customizable**, because you want to give it your own look.\n\n### Usage\n\nAdd this to your scripts\n\n```bash\n    npx dokkie\n```\n\nOr as a blog;\n\n```bash\n    npx dokkie --type=blog\n```\n\n### Deployment\n\nThere are many ways to deploy your documentation. My recommended way is to check netlify. Create an account, link it to your git provider (github, gitlab, bitbucket, etc) and create a new site.\n\n### Configuration\n\nBy default, you don't have to do anything! It will automatically create your documentation website. But, there are quite some things you can change.\n\n[Configuration](/usage/configuration)\n\n### Layouts\n\nDokkie has it's own layouts. By default the layout for either docs or blog will be used.\n\nMore on layouts; [Templates](/usage/templates)\n\n#### Available Layouts\n\n- **default** A default theme with navigation\n- **simple** Simple html pages without any navigation\n- **advanced** Advanced loads some extra scripts and enables code highlighting.\n\n### Themes\n\nWhen a default Layout is used, you can set the `theme` option. The themes are all being used from [coat](https://coat.guyn.nl).\n","meta":{"hide":true},"title":"Dokkie","route":"/index.html"},{"name":"code_of_conduct","date":"2020-07-08T12:33:58.639Z","data":"---\ntitle: Code of Conduct\nmenu: footer\n---\n\n# Contributor Code of Conduct\n\nAs contributors and maintainers of this project, and in the interest of fostering an open and welcoming community, we pledge to respect all people who contribute through reporting issues, posting feature requests, updating documentation, submitting pull requests or patches, and other activities.\n\nWe are committed to making participation in this project a harassment-free experience for everyone, regardless of level of experience, gender, gender identity and expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion, or nationality.\n\nExamples of unacceptable behavior by participants include:\n\n- The use of sexualized language or imagery\n- Personal attacks\n- Trolling or insulting/derogatory comments\n- Public or private harassment\n- Publishing other's private information, such as physical or electronic\n  addresses, without explicit permission\n- Other unethical or unprofessional conduct\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\nBy adopting this Code of Conduct, project maintainers commit themselves to fairly and consistently applying these principles to every aspect of managing this project. Project maintainers who do not follow or enforce the Code of Conduct may be permanently removed from the project team.\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community.\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting a project maintainer at me@silvandiepen.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident.\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.3.0, available at [https://www.contributor-covenant.org/version/1/3/0/][version]\n\n[homepage]: https://www.contributor-covenant.org/\n[version]: https://www.contributor-covenant.org/version/1/3/0/\n","meta":{"title":"Code of Conduct","menu":"footer"},"title":"Code of Conduct","route":"/about/code_of_conduct/index.html"},{"name":"contributors","date":"2020-07-08T12:33:58.639Z","data":"---\nmenu: footer\n---\n\n# Contributors\n\nAt the moment, there is only one contributor. Thats [Sil van Diepen](https://www.silvandiepen.nl). Do you like the project and would you like to help out? Create a PR or reach out to [Sil](me@silvandiepen.com)\n","meta":{"menu":"footer"},"title":"Contributors","route":"/about/contributors/index.html"},{"name":"in-use","date":"2020-07-08T12:33:58.639Z","data":"# In use\n\nDokkie is being used for several projects already. Here is a list of those.\n\nDo you also use Dokkie and want it to show overhere? Do a PR or send an email.\n\n- [Dokkie](https://dokkie.dev)\n- [Icon Components](https://icon-components.svd.im)\n- [CLI Block](https://cli-block.svd.im)\n- [Coat](https://coat.guyn.nl)\n- [Sil van Diepen - Blog](https://blog.silvandiepen.nl)\n","meta":{},"title":"In use","route":"/about/in-use/index.html"},{"name":"readme","date":"2020-07-08T12:33:58.639Z","data":"---\ntitle: About\n---\n\n# About Dokkie\n\nDokkie came to existance as a really tiny tool, just to create your docs. Don't touch anything, don't config anything, just deploy and go!\n","meta":{"title":"About"},"title":"About","route":"/about/index.html"},{"name":"support","date":"2020-07-08T12:33:58.639Z","data":"---\nmenu: footer\n---\n\n# Support\n\nDo you like Dokkie? And would you like to help out in another way than code. Please consider supporting me on [https://patreon.com/silvandiepen](Patreon)\n","meta":{"menu":"footer"},"title":"Support","route":"/about/support/index.html"},{"name":"why","date":"2020-07-08T12:33:58.639Z","data":"---\ntitle: Dokkie\n---\n\n# Why?\n\nThe why is a big question for everything, in the case of Dokkie, like many others Dokkie came to the existance because of a frustration. \"I want to create good looking docs, but I don't want to write them multiple times. I have a pretty good readme, cant we use that for the docs?\".\n\nOfcourse you can, and most of the time its actually sufficient to check the Readme in a github repository. But making it into a website takes another step and usually some code in your repository.\n\nDokkie fixed that. Just using one command and you can deploy your documentation right out of your package repository.\n","meta":{"title":"Dokkie"},"title":"Dokkie","route":"/about/why/index.html"},{"name":"blog","date":"2020-07-08T12:33:58.639Z","data":"---\ntitle: Blog\n---\n\n# Creating a blog\n\nBesides easily creating documentation, you can also use Dokkie to build your blog! The only thing you do is set up a repository with markdown files and build it with one command;\n\n```bash\nnpx dokkie --type=blog\n```\n\n### Sorted on date.\n\nBlogs are automatically ordered by their file creation date. If you don't want that, you can set an alternate date in your files with the following format;\n\n```md\n---\ndate: 2020-02-22\n---\n```\n\n### Meta\n\nA blog post by default has just a title and text, but if you want to give extra info like the tags. You can also just add them to your post;\n\n**Tags**\n\n```md\n---\ntags: test, tag, for, post\n---\n```\n\n**Author + Link**\nThe author also supports a authorLink, which will automatically be the link for the author when clicked on.\n\n```md\n---\nauthor: Sil\nauthorLink: https://silvandiepen.nl\n---\n```\n","meta":{"title":"Blog"},"title":"Blog","route":"/usage/blog/index.html"},{"name":"configuration","date":"2020-07-08T12:33:58.639Z","data":"# Configuration\n\nConfiguration can be done multiple ways, the easiest way is doing this through the API, you can set all navigation just in your build script during deployment. But you could also add a `dokkie.config.json` to your repository where you can set all configuration, in that case you can just run `npx dokkie` and it will set it all.\n\n### Settings\n\n**Default configuration**\n\n| argument         | default                    | options                                                 | description                                                                                                |\n| ---------------- | -------------------------- | ------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------- |\n| `input`          | `.`                        | any folder                                              | Input folder to search for files.                                                                          |\n| `output`         | `dokkie`                   | any new folder                                          | Output folder for pages                                                                                    |\n| `layout`         | `default`                  | `default`,`simple`,`advanced` or a custom hbs/html file | Html layout used                                                                                           |\n| `theme`          | `coat`                     |                                                         | When a default layout is chosen, you can choose a theme from (coat)[https://coat.guyn.nl]                  |\n| `cleanBefore`    | `true`                     | `true` / `false`                                        | Remove the docs folder before creating a new one.                                                          |\n| `extensions`     | `.md`                      | `.md`,`.html`                                           | All file extensions which can be used (supported; .md, .html)                                              |\n| `exclude`        | `node_modules, dist, docs` | any folder                                              | Exclude folders from searching for files.                                                                  |\n| `copy`           | `null`                     | any folder                                              | \"Copy a folder into your output.                                                                           |\n| `strip`          | `pages`                    | any folder                                              | Remove parts of paths to get files directly in their root. All files in `pages`, will be directly in docs. |\n| `showNavigation` | `header, footer`           | `header`, `footer`,`sidebar`                            | Define which navigations should be shown                                                                   |\n| `flatNavigation` | `false`                    | `true` / `false`                                        | Make the navigation flat.                                                                                  |\n| `codeHighlight`  | `true`                     | `true` / `false`                                        | Use Prism to create highlighted code                                                                       |\n| `projectTitle`   | `\"\"`                       |                                                         | Title of the documentation                                                                                 |\n| `favicon`        | Custom generated           | path to image                                           | Create favicons and other meta tags automatically                                                          |\n| `skip`           | `null`                     | `favicons`                                              | Skip parts of the build process to speed it up. For now this can only be done with Favicons                |\n| `config`         | `dokkie.config.json`       | path to json config file                                | Give an alternative path to the config for dokkie                                                          |\n| `debug`          | `false`                    | `true` / `false`                                        | Running Dokkie with Debug on, will give you more details about the build process                           |\n| `language`       | `en`                       | Any language shortname, ex; `en`, `nl` or `es`          | Language of the page, this is set in the templates                                                         |\n\n### API\n\nAll above settings can be altered using the cli\n\n**example**\n\n```bash\nnpx dokkie --input=docs --output=dist --cleanbefore=false --copy=themes --showNavigation=header,footer,sidebar\n```\n\n### Settings files\n\nDokkie also accepts a settings file in the root of your project (or root of where your input is).\n\n**example**\n\n```json\n{\n\t\"input\": \"docs\",\n\t\"output\": \"dist\",\n\t\"cleanBefore\": false,\n\t\"copy\": [\"themes\"],\n\t\"showNavigation\": [\"header\", \"footer\", \"sidebar\"]\n}\n```\n\n### Alternative layouts\n\nUse the `layout` option to define which layout you want to use. More about (layouts)[/usage/templates].\n\n### Alternative styling and scripts\n\nStyles and scripts can be added or overruled in the default layouts.\n\n### add\n\nAdding can be done, this will just ad the extra stylesheets or scripts besides the current ones.\n\n**dokkie.config.json**\n\n```json\n{\n\t\"add\": {\n\t\t\"css\": [\"/mystylesheet.css\"],\n\t\t\"js\": [\"/my-app.js\"]\n\t}\n}\n```\n\n#### overrule\n\nOverrule means the current stylesheets won't be added, but instead the given stylesheets will be used.\n\n**dokkie.config.json**\n\n```json\n{\n\t\"overrule\": {\n\t\t\"css\": [\"/mystylesheet.css\"],\n\t\t\"js\": [\"/my-app.js\"]\n\t}\n}\n```\n\n#### Custom Config file\n\nYou can also define a custom config.json file. But obviously only in the command line.\n\n```bash\nnpx dokkie --config=my-config-dokkie-file.json\n```\n","meta":{},"title":"Configuration","route":"/usage/configuration/index.html"},{"name":"deployment","date":"2020-07-08T12:33:58.639Z","data":"# Deployment\n\n## Using Netlify\n\n1. Make sure you have an account at Netlify.\n2. Login and click on \"Net site from git\"\n3. Connect to your provider and find your repository.\n4. Build commands;\n5. ![Build command](https://i.ibb.co/YdYJ2Sf/Screenshot-2020-05-31-at-17-38-59.png)\n   - Build command: `npx dokkie`\n   - Publish directory: `dokkie`\n\n## Github pages\n\n1. Create a Github Action\n2. Copy the following workflow\n\n```yaml\nname: Deploy Dokkie to GH Pages\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  deploy:\n    runs-on: ubuntu-18.04\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Dokkie\n        run: npx dokkie\n\n      - name: Deploy\n        uses: peaceiris/actions-gh-pages@v3\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./dokkie\n```\n\n3. Push a change on your masterbranch and you are set!\n4. Your docs now live at; ```https://[username].github.io/[reponame]\n","meta":{},"title":"Deployment","route":"/usage/deployment/index.html"},{"name":"favicons","date":"2020-07-08T12:33:58.639Z","data":"# Favicons\n\nDokkie automatically creates a favicon for you. But if you don't like that one, you can ofcourse just\nchange that into any image you want.\n\n**cli**\n\n```bash\nnpx dokkie --favicon=your/image/file.jpg\n```\n\n**dokkie.config.json**\n\n```json\n{\n\t\"favicon\": \"your/image/file.jpg\"\n}\n```\n\n> **_NOTE:_** Make sure the file is quite big in size; recommended: (1024x1024)\n\n### Meta data\n\nThe favicon generator comes with a lot other meta data which is auto included in your head. Turning favicons off, also affects this.\n\n### Skip favicons\n\nIf you don't want favicons. For instance in a development environment or you will use your own through a custom template and copy. You can skip them.\n\n**cli**\n\n```bash\nnpx dokkie --skip=favicons\n```\n\n**dokkie.config.json**\n\n```json\n{\n\t\"skip\": [\"favicons\"]\n}\n```\n","meta":{},"title":"Favicons","route":"/usage/favicons/index.html"},{"name":"markdown","date":"2020-07-08T12:33:58.639Z","data":"# Markdown\n\nDokkie fully supports Markdown + some extra modules to fancy up your documentation.\n\n### Prism\n\nPrism is used to convert your code to be able to use code highlighting.\n\n```css\n.myCode {\n\tlooks: nice;\n}\n```\n\n### Anchors\n\nAutomatically add anchors to your headings.\n\n### Media\n\nMedia will automatically be converted to video includes.\n\n### Emoji\n\nIf you are fond of using emoji's in your code. Go ahead! :)\n\n### Tasklists\n\nCreate styled tasklists in your documentation!\n\n```markdown\n- [x] Add tasklists\n```\n\n- [x] Add tasklists\n\n### Alerts\n\navailable options: `success`, `warning`, `tip`, `error` or nothing.\n\n```markdown\n::: success\nYou've done a great job!\n:::\n```\n\n::: success\nYou've done a great job!\n:::\n","meta":{},"title":"Markdown","route":"/usage/markdown/index.html"},{"name":"navigation","date":"2020-07-08T12:33:58.639Z","data":"# Navigation\n\nThere are multiple ways you can navigate through a website. Dokkie has multiple build in navigation options.\n\n### Navigation types\n\nBy default you will get a footer navigation and a top navigation. But you can also add a sidebar navigation just like you see on this page.\n\n**dokkie.config.json**\n\n```json\n{\n\t\"showNavigation\": [\"header\", \"footer\", \"sidebar\"]\n}\n```\n\n### Flat navigation\n\nDokkie creates the navigation, like you structure your files. But if you want, you can also make the navigation completely flat.\n\n**dokkie.config.json**\n\n```json\n{\n\t\"flatNavigation\": true\n}\n```\n\n### Responsive\n\nHeader and Sidebar menu's will automatically be converted to their mobile counterpart when available. All menu's can be either shown or hidden on mobile/desktop.\n\nThe default setting of showing the header and footer navigation will automatically be converted. It is also possible to supply this object yourself in order to hide and show certain navigation on certain devices.\n\n```json\n{\n\t\"showNavigation\" [\n\t\t{ name: \"header\", mobile: true, desktop:true},\n\t\t{ name: \"footer\", mobile: true, desktop:true}\n\t]\n}\n```\n\nFor instance the Dokkie documentation has the following setting; The header and footer will always be shown, the sidebar will only be shown on desktop format.\n\n```json\n{\n\t\"showNavigation\" [\n\t\t\"header\",\n\t\t\"footer\",\n\t\t{ name: \"sidebar\", mobile: false, desktop:true }\n\t]\n}\n```\n\n### Settings from within the page.\n\n**Change menu in page**\nEvery page will automatically be placed in the navigation based on where the file is placed in the tree. This can be overruled by defining the menu in a markdown file;\n\nThe following file is only shown in the `footer` menu, not like by default in any other menu.\n\n```markdown\n---\nmenu: footer\n---\n```\n\n**Change parent in menu**\nEvery page will automatically be placed in the navigation based on where the file is placed in the tree. This can be overruled by defining the parent in a markdown file;\n\nThe following file is placed in the root of your repository but should in the menu be placed under `usage` in the menu;\n\n```markdown\n---\nparent: usage\n---\n```\n\n---\n\n::: warning\n**Navigation depth**\nFor now the navigation won't go deeper than 2 levels. This means that levels deeper than 2, will simply not be shown in the menu. This does not mean they don't exist.\n:::\n","meta":{},"title":"Navigation","route":"/usage/navigation/index.html"},{"name":"pages","date":"2020-07-08T12:33:58.639Z","data":"# Pages\n\nAll `.md` files within the reach of `input` will be found and made into pages. The pages will be made in the same structure as the markdown files found.\n\nYou can create a folder called `pages` where you can store markdown documentation files. These files won't get the prefix 'pages/' in the url but will be put into the root of the docs.\n\n### Settings\n\nIf you want to have a specific page under another root, but you don't want to change the position of the file in your folder structure. You can add metadata to the markdown file.\n\nFor instance, the License.md in this project should be placed in the root in order to be picked up by certain platforms as the License. But you don't want to show the license directly in your menu. In that case you can add meta data as following to your file.\n\n```md\n---\nparent: about\n---\n```\n\nThis markdown file will be placed under \"about\". (see this documentation). More about the menu property in the settings in [Navigation](/usage/navigation#Settings-from-within-the-page).\n\nThere are a few other options you can add to the metadata which can be used;\n\n| key    | default            | options                     | description                                                                            |\n| ------ | ------------------ | --------------------------- | -------------------------------------------------------------------------------------- |\n| title  | first H1 from file |                             | The title will be used in the menu and route instead of the h1 in the top of the page. |\n| parent | Current parent     |                             | Parent will be the folder where file is placed in the route                            |\n| hide   | `false`            |                             | Add `hide: true` if you don't want the page to show up in the menu                     |\n| remove | `false`            |                             | add `remove: true` if you don't this file to be used at all.                           |\n| menu   | All menus          | `header`,`footer`,`sidebar` | Add the page only to a specific menu only.                                             |\n","meta":{},"title":"Pages","route":"/usage/pages/index.html"},{"name":"readme","date":"2020-07-08T12:33:58.639Z","data":"# Usage\n","meta":{},"title":"Usage","route":"/usage/index.html"},{"name":"templates","date":"2020-07-08T12:33:58.639Z","data":"# Templates\n\nDokkie comes with a few html templates. You can use these, or create your own template based on Dokkie's.\n\n### Use your own\n\n```bash\n    npx dokkie --template=myown-template.html\n```\n\n### Simple Template\n\n<script src=\"https://gist-it.appspot.com/github/silvandiepen/dokkie/blob/master/template/simple.hbs\"></script>\n\n### Default Template\n\n<script src=\"https://gist-it.appspot.com/github/silvandiepen/dokkie/blob/master/template/default.hbs\"></script>\n\n### Blog Template\n\n<script src=\"https://gist-it.appspot.com/github/silvandiepen/dokkie/blob/master/template/blog.hbs\"></script>\n\n## Inject Html\n\nIt's also possible to inject html into the templates.\n\n**dokkie.config.json**\n\n```json\n{\n\t\"injectHtml\": {\n\t\t\"mainBefore\": \"<my-html>string</my-html>\"\n\t}\n}\n```\n\n**options**\n\n| option         | description                    | availabe in layout |\n| -------------- | ------------------------------ | ------------------ |\n| headerBefore   | Add html in top of header      | default, blog      |\n| headerAfter    | Add html in bottom of header   | default, blog      |\n| sidebarBefore  | Add html in top of sidebar     | default            |\n| sidebarAfter   | Add html in bottom of sidebar  | default            |\n| mainBefore     | Add html in top of main        | default            |\n| mainAfter      | Add html in bottom of main     | default            |\n| footerBefore   | Add html in top of footer      | default            |\n| footerAfter    | Add html in bottom of footer   | default            |\n| overviewBefore | Add html in top of overview    | blog               |\n| overviewAfter  | Add html in bottom of overview | blog               |\n| articleBefore  | Add html in top of article     | blog               |\n| articleAfter   | Add html in bottom of article  | blog               |\n\n### Custom\n\nA custom layout can be used by giving a layout argument;\n\n```bash\n    npx dokkie --layout=src/my-own/layout.html\n```\n","meta":{},"title":"Templates","route":"/usage/templates/index.html"}]